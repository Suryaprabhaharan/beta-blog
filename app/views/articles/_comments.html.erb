<% @article.comments.includes(:user, :comment_spams).each do |comment| %>
	<div class="comments-listing row">
		<div class="comment-item">
			<div class="comment-content">
				<div class="comment-author">
				<strong><%= comment.user_id!=nil ? (link_to comment.user.username, user_path(comment.user.id)) : "Anonymous" %> </strong>
				</div>
				<div class="comment-desc">
					<% if logged_in? and current_user.id == comment.user_id %>
						<%= form_tag edit_comment_path(id: comment.id), remote: true, method: :post, id: "article-comment-edit" do %>
							<%= text_field_tag :new_comment, params[:new_comment], placeholder: "Enter comment", value: "#{comment.description}", class: "comment-edit" %>
						<% end %>
					<% else %>
						<%=comment.description%><br>
					<% end %>
				</div>
				<div class="comment-ellipsis">
					<% if logged_in? %>
					<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><i class="fa fa-ellipsis-v" aria-hidden="true"></i></a>
	           			<ul class="comment-ellipsis-dropdown dropdown-menu">
	           				<% if current_user.id == @article.user.id || comment.user_id == current_user.id || current_user.admin? %>
		           				<li><%= link_to "Delete", delete_comment_path(id: comment.id), class: "comment-action", method: :delete, remote: true %></li>
							<% end %>
							<% if current_user.id != comment.user.id %>
								<% if !comment.reported?(current_user) %>
			           				<li><%= link_to "Report Spam", report_comment_path(id: comment.id), class: "comment-action", method: :post, remote: true %></li>
		           				<% else %>
		           					<li><%= link_to "Undo report", unreport_comment_path(id: comment.id), class: "comment-action", method: :delete, remote: true %></li>
		           				<% end %>
							<% end %>
	              		</ul>
              		<% end %>
	          	</div>
			</div>
			<div class="comment-options">
				<small><%=time_ago_in_words(comment.created_at)%></small>
				<% if comment.created_at != comment.updated_at %>
					<small>Last Edited: <%=time_ago_in_words(comment.updated_at)%></small>
				<% end %>
				<% spam_number = comment.comment_spams.count %>
				<% if spam_number > 0 %>
					<small style="color:red"><%=pluralize(spam_number, 'user')%> reported this as spam</small>
				<% end %>
			</div>
		</div>
	</div>
<% end %>
<%= form_tag add_comment_path(id: @article.id), remote: true, method: :post, id: "article-comment-form" do %>
	<div class="form-group">
		<div class="col-sm-10">
			<%= text_field_tag :comment, params[:comment], placeholder: "Enter comment", value: "", class: "form-control" %>
		</div>
		<div class="col-sm-2">
			<%= button_tag(type: :submit, class: "btn btn-default") do%>
				Post
			<% end %>
		</div>
	</div>
<% end %>